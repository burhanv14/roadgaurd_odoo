import axios from 'axios';

// Free translation API (LibreTranslate)
const TRANSLATION_API_URL = 'https://libretranslate.de/translate';

// Rate limiting configuration
const RATE_LIMIT = {
  maxRequests: 5, // Max 5 requests per window
  windowMs: 1000, // 1 second window
  requests: [] as number[],
};

// Fallback translations for common phrases (in case API fails)
const FALLBACK_TRANSLATIONS: Record<string, string> = {
  // App title
  'RoadGuard': 'RoadGuard',
  
  // Login page
  'Sign in to your account': 'рдЕрдкрдиреЗ рдЦрд╛рддреЗ рдореЗрдВ рд╕рд╛рдЗрди рдЗрди рдХрд░реЗрдВ',
  'Or': 'рдпрд╛',
  'create a new account': 'рдирдпрд╛ рдЦрд╛рддрд╛ рдмрдирд╛рдПрдВ',
  'Email address': 'рдИрдореЗрд▓ рдкрддрд╛',
  'Password': 'рдкрд╛рд╕рд╡рд░реНрдб',
  'Remember me': 'рдореБрдЭреЗ рдпрд╛рдж рд░рдЦреЗрдВ',
  'Forgot your password?': 'рдкрд╛рд╕рд╡рд░реНрдб рднреВрд▓ рдЧрдП?',
  'Sign in': 'рд╕рд╛рдЗрди рдЗрди рдХрд░реЗрдВ',
  'Signing in...': 'рд╕рд╛рдЗрди рдЗрди рд╣реЛ рд░рд╣рд╛ рд╣реИ...',
  
  // Signup page
  'Create your account': 'рдЕрдкрдирд╛ рдЦрд╛рддрд╛ рдмрдирд╛рдПрдВ',
  'sign in to your existing account': 'рдЕрдкрдиреЗ рдореМрдЬреВрджрд╛ рдЦрд╛рддреЗ рдореЗрдВ рд╕рд╛рдЗрди рдЗрди рдХрд░реЗрдВ',
  'Full Name': 'рдкреВрд░рд╛ рдирд╛рдо',
  'Email Address': 'рдИрдореЗрд▓ рдкрддрд╛',
  'Confirm Password': 'рдкрд╛рд╕рд╡рд░реНрдб рдХреА рдкреБрд╖реНрдЯрд┐ рдХрд░реЗрдВ',
  'Creating account...': 'рдЦрд╛рддрд╛ рдмрди рд░рд╣рд╛ рд╣реИ...',
  'Sign up': 'рд╕рд╛рдЗрди рдЕрдк рдХрд░реЗрдВ',
  
  // Dashboard
  'Dashboard': 'рдбреИрд╢рдмреЛрд░реНрдб',
  'Welcome': 'рд╕реНрд╡рд╛рдЧрдд рд╣реИ',
  'Logout': 'рд▓реЙрдЧрдЖрдЙрдЯ',
  'Total Projects': 'рдХреБрд▓ рдкреНрд░реЛрдЬреЗрдХреНрдЯ',
  'Completed Tasks': 'рдкреВрд░реНрдг рдХрд╛рд░реНрдп',
  'Pending Tasks': 'рд▓рдВрдмрд┐рдд рдХрд╛рд░реНрдп',
  'Recent Activity': 'рд╣рд╛рд▓ рдХреА рдЧрддрд┐рд╡рд┐рдзрд┐',
  'Your latest actions and updates.': 'рдЖрдкрдХреЗ рдирд╡реАрдирддрдо рдХрд╛рд░реНрдп рдФрд░ рдЕрдкрдбреЗрдЯред',
  'New project created: "E-commerce Website"': 'рдирдпрд╛ рдкреНрд░реЛрдЬреЗрдХреНрдЯ рдмрдирд╛рдпрд╛ рдЧрдпрд╛: "рдИ-рдХреЙрдорд░реНрд╕ рд╡реЗрдмрд╕рд╛рдЗрдЯ"',
  'Task completed: "Design homepage mockup"': 'рдХрд╛рд░реНрдп рдкреВрд░реНрдг: "рд╣реЛрдордкреЗрдЬ рдореЙрдХрдЕрдк рдбрд┐рдЬрд╝рд╛рдЗрди"',
  'Team member added: "Sarah Johnson"': 'рдЯреАрдо рд╕рджрд╕реНрдп рдЬреЛрдбрд╝рд╛ рдЧрдпрд╛: "рд╕рд╛рд░рд╛ рдЬреЙрдирд╕рди"',
  '2 hours ago': '2 рдШрдВрдЯреЗ рдкрд╣рд▓реЗ',
  '4 hours ago': '4 рдШрдВрдЯреЗ рдкрд╣рд▓реЗ',
  '1 day ago': '1 рджрд┐рди рдкрд╣рд▓реЗ',
  
  // Home page
  'Welcome to RoadGuard': 'RoadGuard рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ',
  'Your trusted partner for road safety and assistance': 'рд╕рдбрд╝рдХ рд╕реБрд░рдХреНрд╖рд╛ рдФрд░ рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП рдЖрдкрдХрд╛ рд╡рд┐рд╢реНрд╡рд╕рдиреАрдп рд╕рд╛рдереА',
  '24/7 Emergency Support': '24/7 рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕рд╣рд╛рдпрддрд╛',
  'Real-time Vehicle Tracking': 'рд░реАрдпрд▓-рдЯрд╛рдЗрдо рд╡рд╛рд╣рди рдЯреНрд░реИрдХрд┐рдВрдЧ',
  'Roadside Assistance': 'рд╕рдбрд╝рдХ рдХрд┐рдирд╛рд░реЗ рд╕рд╣рд╛рдпрддрд╛',
  'Get Started Today': 'рдЖрдЬ рд╣реА рд╢реБрд░реВ рдХрд░реЗрдВ',
  'Learn More': 'рдФрд░ рдЬрд╛рдиреЗрдВ',
  'Round the clock assistance when you need it most': 'рдЬрдм рдЖрдкрдХреЛ рд╕рдмрд╕реЗ рдЬреНрдпрд╛рджрд╛ рдЬрд░реВрд░рдд рд╣реЛ рддрдм 24 рдШрдВрдЯреЗ рд╕рд╣рд╛рдпрддрд╛',
  'Know exactly where your vehicle is at all times': 'рд╣рд░ рд╕рдордп рдЕрдкрдиреЗ рд╡рд╛рд╣рди рдХреА рд╕рдЯреАрдХ рдЬрд╛рдирдХрд╛рд░реА рд░рдЦреЗрдВ',
  'Professional help when you\'re stranded': 'рдЬрдм рдЖрдк рдлрдВрд╕реЗ рд╣реЛрдВ рддреЛ рдкреЗрд╢реЗрд╡рд░ рдорджрдж',
  
  // Header
  '24x7 Support': '24x7 рд╕рд╣рд╛рдпрддрд╛',
  'Get Help': 'рдорджрдж рд▓реЗрдВ',
  'Get Help Now': 'рдЕрднреА рдорджрдж рд▓реЗрдВ',
  
  // Footer
  'Reach Us': 'рд╣рдорд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ',
  'Company': 'рдХрдВрдкрдиреА',
  'About Us': 'рд╣рдорд╛рд░реЗ рдмрд╛рд░реЗ рдореЗрдВ',
  'Careers': 'рдХрд░рд┐рдпрд░',
  'Contact Us': 'рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ',
  'News': 'рд╕рдорд╛рдЪрд╛рд░',
  'Services': 'рд╕реЗрд╡рд╛рдПрдВ',
  'Flat Tyre': 'рдлреНрд▓реИрдЯ рдЯрд╛рдпрд░',
  'Battery Jumpstart': 'рдмреИрдЯрд░реА рдЬрдВрдкрд╕реНрдЯрд╛рд░реНрдЯ',
  'Key Unlock Assistance': 'рдХреБрдВрдЬреА рдЕрдирд▓реЙрдХ рд╕рд╣рд╛рдпрддрд╛',
  'Fuel Delivery': 'рдИрдВрдзрди рдбрд┐рд▓реАрд╡рд░реА',
  'Towing': 'рдЯреЛрдЗрдВрдЧ',
  'Quick Links': 'рддреНрд╡рд░рд┐рдд рд▓рд┐рдВрдХ',
  'My Subscriptions': 'рдореЗрд░реА рд╕рджрд╕реНрдпрддрд╛рдПрдВ',
  'Nearby Fuel Stations': 'рдкрд╛рд╕ рдХреЗ рдкреЗрдЯреНрд░реЛрд▓ рдкрдВрдк',
  'Fitment Centers': 'рдлрд┐рдЯрдореЗрдВрдЯ рд╕реЗрдВрдЯрд░',
  'Year Recap': 'рд╡рд░реНрд╖ рд╕рдореАрдХреНрд╖рд╛',
  'Services Pvt. Ltd.': 'рд╕реЗрд╡рд╛рдПрдВ рдкреНрд░рд╛рдЗрд╡реЗрдЯ рд▓рд┐рдорд┐рдЯреЗрдб',
  'All Rights Reserved.': 'рд╕рд░реНрд╡рд╛рдзрд┐рдХрд╛рд░ рд╕реБрд░рдХреНрд╖рд┐рддред',
  'Privacy Policy': 'рдЧреЛрдкрдиреАрдпрддрд╛ рдиреАрддрд┐',
  'Terms & Conditions': 'рдирд┐рдпрдо рдФрд░ рд╢рд░реНрддреЗрдВ',
  '123 Main Street, MG Road': '123 рдореЗрди рд╕реНрдЯреНрд░реАрдЯ, рдПрдордЬреА рд░реЛрдб',
  'Bengaluru, Karnataka - 560001': 'рдмреЗрдВрдЧрд▓реБрд░реБ, рдХрд░реНрдирд╛рдЯрдХ - 560001',
  'India': 'рднрд╛рд░рдд',
  
  // 404 page
  'Oops! The page you\'re looking for doesn\'t exist.': 'рдЙрдлреНрдл! рдЖрдк рдЬрд┐рд╕ рдкреЗрдЬ рдХреА рддрд▓рд╛рд╢ рдХрд░ рд░рд╣реЗ рд╣реИрдВ рд╡рд╣ рдореМрдЬреВрдж рдирд╣реАрдВ рд╣реИред',
  
  // Common
  'Translating...': 'рдЕрдиреБрд╡рд╛рдж рд╣реЛ рд░рд╣рд╛ рд╣реИ...',
};

export interface TranslationRequest {
  q: string;
  source: string;
  target: string;
  format?: string;
}

export interface TranslationResponse {
  translatedText: string;
}

export class TranslationService {
  private static instance: TranslationService;
  private cache: Map<string, string> = new Map();
  private pendingRequests: Map<string, Promise<string>> = new Map();
  private isInitialized = false;

  private constructor() {
    this.loadCachedTranslations();
  }

  public static getInstance(): TranslationService {
    if (!TranslationService.instance) {
      TranslationService.instance = new TranslationService();
    }
    return TranslationService.instance;
  }

  /**
   * Check rate limit
   */
  private checkRateLimit(): boolean {
    const now = Date.now();
    RATE_LIMIT.requests = RATE_LIMIT.requests.filter(
      time => now - time < RATE_LIMIT.windowMs
    );
    
    if (RATE_LIMIT.requests.length >= RATE_LIMIT.maxRequests) {
      return false;
    }
    
    RATE_LIMIT.requests.push(now);
    return true;
  }

  /**
   * Wait for rate limit
   */
  private async waitForRateLimit(): Promise<void> {
    while (!this.checkRateLimit()) {
      await new Promise(resolve => setTimeout(resolve, 100));
    }
  }

  /**
   * Generate cache key for translation
   */
  private getCacheKey(text: string, targetLang: string): string {
    return `${text.toLowerCase().trim()}_${targetLang}`;
  }

  /**
   * Check if translation exists in cache
   */
  private getFromCache(text: string, targetLang: string): string | null {
    const cacheKey = this.getCacheKey(text, targetLang);
    return this.cache.get(cacheKey) || null;
  }

  /**
   * Store translation in cache
   */
  private setCache(text: string, targetLang: string, translation: string): void {
    const cacheKey = this.getCacheKey(text, targetLang);
    this.cache.set(cacheKey, translation);
    
    // Persist to localStorage for persistence across sessions
    try {
      const cachedTranslations = JSON.parse(localStorage.getItem('translations') || '{}');
      cachedTranslations[cacheKey] = translation;
      localStorage.setItem('translations', JSON.stringify(cachedTranslations));
    } catch (error) {
      console.warn('Failed to persist translation to localStorage:', error);
    }
  }

  /**
   * Load cached translations from localStorage
   */
  public loadCachedTranslations(): void {
    if (this.isInitialized) return;
    
    try {
      const cachedTranslations = JSON.parse(localStorage.getItem('translations') || '{}');
      Object.entries(cachedTranslations).forEach(([key, value]) => {
        this.cache.set(key, value as string);
      });
      this.isInitialized = true;
      console.log(`ЁЯУЪ Loaded ${Object.keys(cachedTranslations).length} cached translations`);
    } catch (error) {
      console.warn('Failed to load cached translations:', error);
    }
  }

  /**
   * Get fallback translation if available
   */
  private getFallbackTranslation(text: string, targetLang: string): string | null {
    if (targetLang === 'hi' && FALLBACK_TRANSLATIONS[text]) {
      console.log(`ЁЯУЪ Using fallback translation: "${text}" тЖТ "${FALLBACK_TRANSLATIONS[text]}"`);
      return FALLBACK_TRANSLATIONS[text];
    }
    return null;
  }

  /**
   * Translate text using LibreTranslate API
   */
  private async translateWithAPI(text: string, targetLang: string): Promise<string> {
    try {
      // Wait for rate limit before making request
      await this.waitForRateLimit();
      
      console.log(`ЁЯМР Translating: "${text}" to ${targetLang}`);
      
      const response = await axios.post<TranslationResponse>(
        TRANSLATION_API_URL,
        {
          q: text,
          source: 'auto',
          target: targetLang,
          format: 'text'
        },
        {
          headers: {
            'Content-Type': 'application/json',
          },
          timeout: 10000, // Reduced timeout to 10 seconds
        }
      );

      console.log(`тЬЕ Translation successful: "${text}" тЖТ "${response.data.translatedText}"`);
      return response.data.translatedText;
    } catch (error) {
      console.error('тЭМ Translation API error:', error);
      
      // More detailed error logging
      if (axios.isAxiosError(error)) {
        console.error('Axios error details:', {
          status: error.response?.status,
          statusText: error.response?.statusText,
          data: error.response?.data,
          message: error.message,
          code: error.code
        });
        
        // Handle specific error cases
        if (error.response?.status === 429) {
          throw new Error('Translation rate limit exceeded. Please try again later.');
        } else if (error.response?.status === 503) {
          throw new Error('Translation service temporarily unavailable.');
        } else if (error.code === 'ECONNABORTED') {
          throw new Error('Translation request timed out.');
        } else if (error.code === 'NETWORK_ERROR') {
          throw new Error('Network error. Please check your internet connection.');
        }
      }
      
      throw new Error(`Translation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * Translate text with caching and deduplication
   */
  public async translate(text: string, targetLang: string): Promise<string> {
    if (!text || !text.trim()) {
      return text;
    }

    const cacheKey = this.getCacheKey(text, targetLang);
    
    // Check cache first
    const cachedTranslation = this.getFromCache(text, targetLang);
    if (cachedTranslation) {
      console.log(`ЁЯУЛ Using cached translation: "${text}" тЖТ "${cachedTranslation}"`);
      return cachedTranslation;
    }

    // Check fallback translations
    const fallbackTranslation = this.getFallbackTranslation(text, targetLang);
    if (fallbackTranslation) {
      this.setCache(text, targetLang, fallbackTranslation);
      return fallbackTranslation;
    }

    // Check if there's already a pending request for this translation
    if (this.pendingRequests.has(cacheKey)) {
      console.log(`тП│ Waiting for pending translation: "${text}"`);
      return this.pendingRequests.get(cacheKey)!;
    }

    // Create new translation request with delay to prevent blocking
    const translationPromise = new Promise<string>((resolve, reject) => {
      // Use setTimeout to prevent blocking the UI
      setTimeout(async () => {
        try {
          const translation = await this.translateWithAPI(text, targetLang);
          this.setCache(text, targetLang, translation);
          resolve(translation);
        } catch (error) {
          reject(error);
        } finally {
          this.pendingRequests.delete(cacheKey);
        }
      }, 0);
    });

    this.pendingRequests.set(cacheKey, translationPromise);
    return translationPromise;
  }

  /**
   * Batch translate multiple texts with rate limiting
   */
  public async translateBatch(texts: string[], targetLang: string): Promise<string[]> {
    console.log(`ЁЯФД Starting batch translation of ${texts.length} texts to ${targetLang}`);
    
    try {
      // Process texts in smaller batches to prevent overwhelming the API
      const batchSize = 3;
      const results: string[] = [];
      
      for (let i = 0; i < texts.length; i += batchSize) {
        const batch = texts.slice(i, i + batchSize);
        
        const batchResults = await Promise.allSettled(
          batch.map((text, index) => 
            this.translate(text, targetLang)
              .catch(error => {
                console.error(`тЭМ Failed to translate text ${i + index + 1}: "${text}"`, error);
                return text; // Return original text on error
              })
          )
        );

        const batchTranslatedTexts = batchResults.map((result, index) => {
          if (result.status === 'fulfilled') {
            return result.value;
          } else {
            console.warn(`тЪая╕П Translation failed for text ${i + index + 1}, using original`);
            return batch[index];
          }
        });

        results.push(...batchTranslatedTexts);
        
        // Add delay between batches to respect rate limits
        if (i + batchSize < texts.length) {
          await new Promise(resolve => setTimeout(resolve, 200));
        }
      }

      console.log(`тЬЕ Batch translation completed: ${results.length} texts`);
      return results;
    } catch (error) {
      console.error('тЭМ Batch translation failed:', error);
      // Return original texts on complete failure
      return texts;
    }
  }

  /**
   * Clear translation cache
   */
  public clearCache(): void {
    this.cache.clear();
    this.pendingRequests.clear();
    localStorage.removeItem('translations');
    console.log('ЁЯЧСя╕П Translation cache cleared');
  }

  /**
   * Get cache statistics
   */
  public getCacheStats(): { size: number; pendingRequests: number } {
    return {
      size: this.cache.size,
      pendingRequests: this.pendingRequests.size
    };
  }
}

export const translationService = TranslationService.getInstance();
